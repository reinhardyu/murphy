<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:p="http://www.springframework.org/schema/p"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:cache="http://www.springframework.org/schema/cache"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
		http://www.springframework.org/schema/context
    	http://www.springframework.org/schema/context/spring-context-3.0.xsd
		http://www.springframework.org/schema/mvc
    	http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
    	http://www.springframework.org/schema/cache
    	http://www.springframework.org/schema/cache/spring-cache-3.1.xsd">


	<!-- 开启 mvc  的注解编程 -->
	<mvc:annotation-driven />

	<!-- 自动扫描包，可以写多个 -->
	<context:component-scan base-package="com.murphy"></context:component-scan>

	<!-- 允许对静态资源文件的访问 -->
	<mvc:default-servlet-handler />
	<bean class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping">
		<!--<property name="interceptors" ref="localeChangeInterceptor"/>-->
		<property name="useDefaultSuffixPattern" value="false" />
	</bean>

	<bean id="propertyConfigurer"
		  class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath*:**/jdbc.properties</value>
			</list>
		</property>
	</bean>


	<!-- 视图解释类 -->
	<bean
			class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/" />
		<property name="suffix" value="" /><!--可为空,方便实现自已的依据扩展名来选择视图解释类的逻辑 -->
		<property name="viewClass"
				  value="org.springframework.web.servlet.view.JstlView" />
	</bean>

	<!-- 集成数据库 -->
	<bean id="ds" class="org.logicalcobwebs.proxool.ProxoolDataSource">
		<property name="driver" value="${jdbc.driver}"></property>
		<property name="driverUrl" value="${jdbc.url}"></property>
		<property name="user" value="${jdbc.username}"></property>
		<property name="password" value="${jdbc.password}"></property>
		<property name="minimumConnectionCount" value="5"></property>
		<property name="maximumConnectionCount" value="${maxIdle}"></property>
	</bean>
	<!-- Spring、MyBatis的整合，需要在 Spring 应用上下文中定义至少两样东西：一个SqlSessionFactory和至少一个数据映射器类。 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="configLocation" value="classpath:mybatis/sqlMapConfig.xml" />
		<property name="dataSource" ref="ds" />
		<property name="mapperLocations" value="classpath:mybatis/**/**Mapper.xml" />
	</bean>

	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory" />
	</bean>

	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource">
			<ref local="ds"/>
		</property>
	</bean>

	<!--&lt;!&ndash; 缓存注解声明，使用注解缓存 &ndash;&gt;-->
	<!--<cache:annotation-driven cache-manager="cacheManager" />-->

	<!--&lt;!&ndash; 指定ehcache.xml的位置 &ndash;&gt;-->
	<!--<bean id="cacheManagerFactory"-->
		  <!--class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean"-->
		  <!--p:configLocation="classpath:/ehcache.xml" />-->

	<!--&lt;!&ndash; 声明缓存Manager &ndash;&gt;-->
	<!--<bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager"-->
		  <!--p:cacheManager-ref="cacheManagerFactory" />-->

	<!-- ================================事务相关控制================================================= -->
	<!-- 配置事务管理器 -->
	<bean id="transactionManager"
		  class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="ds" />
	</bean>


	<!-- 启用注解事务 -->
	<tx:annotation-driven transaction-manager="transactionManager" />

	<!-- 配置事务拦截器 -->
	<bean id="transactionInterceptor"
		  class="org.springframework.transaction.interceptor.TransactionInterceptor">
		<!-- 事务拦截器bean需要依赖注入一个事务管理器 -->
		<property name="transactionManager" ref="transactionManager" />
		<property name="transactionAttributes">
			<!-- 下面定义事务传播属性 -->
			<props>
				<prop key="save*">PROPAGATION_REQUIRED</prop>
				<prop key="update*">PROPAGATION_REQUIRED</prop>
				<prop key="delete*">PROPAGATION_REQUIRED</prop>
			</props>
		</property>
	</bean>

	<bean class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
		<!--指定对满足哪些bean name的bean自动生成业务代理 -->
		<property name="beanNames">
			<!--   下面是所有需要自动创建事务代理的bean-->
			<list>
				<value>*ServiceImpl</value>
				<value>*Service</value>
				<value>*DaoImpl</value>
				<value>*Dao</value>
				<!--<value>*Mapper</value>-->
				<!--<value>*MapperImpl</value>-->
			</list>
			<!--   此处可增加其他需要自动创建事务代理的bean-->
		</property>
		<!--   下面定义BeanNameAutoProxyCreator所需的事务拦截器-->
		<property name="interceptorNames">
			<list>
				<value>transactionInterceptor</value>
			</list>
		</property>
	</bean>



	<!-- 拦截器 -->
	<!--<mvc:interceptors>-->
		<!--<bean class="com.smartdoer.bap.interceptor.LoginSessionInterceptor" />-->
	<!--</mvc:interceptors>-->
	<bean id="multipartResolver"
		  class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
	</bean>
</beans>